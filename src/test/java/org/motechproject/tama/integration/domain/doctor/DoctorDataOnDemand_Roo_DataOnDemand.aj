// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.motechproject.tama.integration.domain.doctor;

import java.util.List;
import java.util.Random;
import org.motechproject.tama.domain.Doctor;
import org.springframework.stereotype.Component;

privileged aspect DoctorDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DoctorDataOnDemand: @Component;
    
    private Random DoctorDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<Doctor> DoctorDataOnDemand.data;
    
    public Doctor DoctorDataOnDemand.getNewTransientDoctor(int index) {
        Doctor obj = new Doctor();
        setDoctorId(obj, index);
        setFirstName(obj, index);
        setLastName(obj, index);
        return obj;
    }
    
    public void DoctorDataOnDemand.setDoctorId(Doctor obj, int index) {
        java.lang.String doctorId = "doctorId_" + index;
        obj.setDoctorId(doctorId);
    }
    
    public void DoctorDataOnDemand.setFirstName(Doctor obj, int index) {
        java.lang.String firstName = "firstName_" + index;
        obj.setFirstName(firstName);
    }
    
    public void DoctorDataOnDemand.setLastName(Doctor obj, int index) {
        java.lang.String lastName = "lastName_" + index;
        obj.setLastName(lastName);
    }
    
    public Doctor DoctorDataOnDemand.getSpecificDoctor(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Doctor obj = data.get(index);
        return Doctor.findDoctor(obj.getId());
    }
    
    public Doctor DoctorDataOnDemand.getRandomDoctor() {
        init();
        Doctor obj = data.get(rnd.nextInt(data.size()));
        return Doctor.findDoctor(obj.getId());
    }
    
    public boolean DoctorDataOnDemand.modifyDoctor(Doctor obj) {
        return false;
    }
    
    public void DoctorDataOnDemand.init() {
        data = Doctor.findDoctorEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Doctor' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<Doctor>();
        for (int i = 0; i < 10; i++) {
            Doctor obj = getNewTransientDoctor(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
