<div xmlns:tiles="http://tiles.apache.org/tags-tiles" xmlns:c="http://java.sun.com/jsp/jstl/core"
     xmlns:fn="http://java.sun.com/jsp/jstl/functions" xmlns:spring="http://www.springframework.org/tags"
     xmlns:util="urn:jsptagdir:/WEB-INF/tags/util" xmlns:jsp="http://java.sun.com/JSP/Page" version="2.0">
    <jsp:directive.page contentType="text/html;charset=UTF-8"/>
    <jsp:output omit-xml-declaration="yes"/>
    <spring:message var="title" code="change_password_title" htmlEscape="false"/>

    <spring:message code="field_required" var="field_required" htmlEscape="false"/>
    <spring:message code="change_password_confirm_mismatch" var="pwd_confirm_mismatch" htmlEscape="false"/>
    <spring:message code="change_password_invalid" var="pwd_new_invalid" htmlEscape="false"/>


    <util:panel id="title" title="${title}">
        <h2>${fn:escapeXml(title)}</h2>
        <c:if test="${not empty errors}">
            <div class="errors">
                <p>
                    <spring:message code="change_password_failed"/>
                </p>
            </div>
        </c:if>
        <spring:url value="/security/changePassword" var="form_url"/>

        <form id="changePasswordForm" name="changePasswordForm" action="${fn:escapeXml(form_url)}" method="POST">
            <div>
                <label for="j_oldPassword">
                    <spring:message code="change_password_old"/>
                </label>
                <input id="j_oldPassword" type='password' name='j_oldPassword' style="width:150px;"/>
                <span id="oldPasswordValidateError" class="error-inline" />
            </div>
            <br/>

            <div>
                <label for="j_newPassword">
                    <spring:message code="change_password_new"/>
                </label>
                <input id="j_newPassword" type='password' name='j_newPassword' style="width:150px"/>
                <span id="newPasswordValidateError" class="error-inline"/>
            </div>
            <br/>

            <div>
                <label for="j_newPasswordConfirm">
                    <spring:message code="change_password_confirm"/>
                </label>
                <input id="j_newPasswordConfirm" type='password' name='j_newPasswordConfirm' style="width:150px"/>
                <span id="newPasswordConfirmValidateError" class="error-inline"/>
            </div>
            <br/>

            <div class="submit">
                <spring:message code="button_submit" var="submit_label" htmlEscape="false"/>
                <input id="proceed" type="submit" value="${fn:escapeXml(submit_label)}"/>
                <spring:message code="button_reset" var="reset_label" htmlEscape="false"/>
                <input id="reset" type="reset" value="${fn:escapeXml(reset_label)}"/>
            </div>
        </form>
    </util:panel>
    <script type="text/javascript">
        dojo.addOnLoad(function() {

            var form = dojo.byId("changePasswordForm");
            var oldPassword = dojo.byId("j_oldPassword");
            var oldPasswordValidateError = dojo.byId("oldPasswordValidateError");
            var newPassword = dojo.byId("j_newPassword");
            var newPasswordValidateError = dojo.byId("newPasswordValidateError");
            var confirmPassword = dojo.byId("j_newPasswordConfirm");
            var confirmPasswordValidateError = dojo.byId("newPasswordConfirmValidateError");

            var validatorsMap = {
                j_oldPassword: [validateRequired],
                j_newPassword: [validateRequired, validateNewPassword],
                j_newPasswordConfirm: [validateRequired, validateConfirmPassword]
            };

            dojo.forEach([oldPassword, newPassword, confirmPassword], function(element, i) {
                dojo.connect(form, "onsubmit", function(evt) {
                    var errorElement = getErrorElementFor(element);
                    dojo.html.set(errorElement, "");
                    var validators = validatorsMap[element.id];
                    dojo.some(validators, function(validator, i) {
                        if (validator(element) != null) {
                            dojo.html.set(errorElement, validator(element));
                            evt.preventDefault();
                            return true;
                        }
                        return false;
                    });
                });
            });

            function getErrorElementFor(element) {
                return dojo.byId(element.id.substring(2) + "ValidateError");
            }

            function validateNewPassword() {
                return ((!(newPassword.value === oldPassword.value)) &amp;&amp; newPassword.value.length > 3) ? null : "${pwd_new_invalid}";
            }

            function validateRequired(element) {
                return (element.value != null &amp;&amp; dojo.trim(element.value).length > 0) ? null : "${field_required}";
            }

            function validateConfirmPassword() {
                return (confirmPassword.value === newPassword.value)? null : "${pwd_confirm_mismatch}";
            }
        });
    </script>
</div>