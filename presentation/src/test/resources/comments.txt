1. Service is a service and should not be kept in ivr package. IVR and Web are different presentation mechanism, but are domain services.
2. Domain package should be subdivided into smaller parts.
3. Use composition over inheritance, any class hierarchy bigger than two probably is a smell. org.motechproject.tama.web.command.StopPreviousPillReminderCommand

Find out
- is the pin number set to 4 or it can change. where is this limit
- how to handle outbox
- calllog would we add more to it

Test
- outbox

Share:
The dynamic command tests are missing
classpath for outbox message
use service to setup outbox messages
should be able to run it from the ide
emulator should provide feedback on hangup and till response is not received
should throw exception when the language is not set
write test for marathi
entire call log should be passed instead of part of it, as the original can be deleted
why clinic_id
use constants in the tests also
org.motechproject.tama.ivr.TamaIVRMessage.getWav, why is the message picked from the ivrproperties
Commands are controller, as they deal with context (user input, session, cookies)

projects
--------
motech
motech-delivery-tools
motech-deploy

impl
impl-delivery-tools
impl-deploy

Spring Integration, JMS and Active MQ
-------------------------------------
A way of looking at it: Pipes and filter.
Another way: Message, Producer and Consumer
Spring's way: Message, Channel, Endpoint
	Endpoint: Functional: Transformer, Filter, Router, Splitter, Aggregator)
			  Implementation: Service activator (invokes a Pojo implementation)
    Channel: Types: PollableChannel, SubscribableChannel
             Implementations: PublishSubscribeChannel, QueueChannel (FIFO), PriorityChannel, RendevousChannel (Sender blocks till Receiver picks up the message), DirectChannel
             Storage: InMemory/Local, JMS backed, ChannelAdapter (Custom)
    Message: EventMessage, DocumentMessage

    MessagingTemplate: Provides api to send/receive of message from the application code
    ChannelAdapter: Type of endpoind. JMS, filebased, http etc.
    Gateway: Endpoint

SpringFrameworkJMS
    JMSTemplate: producing and consuming messages.
                 ConnectionFactory->Connection->Session->MessageProducer->send

SpringJMS
    InboundChannelAdapters
        1. JmsTemplate, PollingBased
        2. MessageDriven, SpringMessageListener
    OutboundChannelAdapter
        JmsTemplate