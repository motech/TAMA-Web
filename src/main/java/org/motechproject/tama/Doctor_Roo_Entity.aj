// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.motechproject.tama;

import java.lang.Integer;
import java.util.List;
import javax.persistence.Entity;

import org.codehaus.jackson.annotate.JsonProperty;
import org.ektorp.support.TypeDiscriminator;
import org.motechproject.tama.repository.Doctors;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Doctor_Roo_Entity {
    

    @Autowired
    transient Doctors Doctor.doctors;

    @JsonProperty("_id")
    private String Doctor.id;

    @JsonProperty("_rev")
    private String Doctor.revision;

    @TypeDiscriminator
    private String Doctor.documentType = "Doctor";

    private Integer Doctor.version;
    
    public String Doctor.getId() {
        return this.id;
    }
    
    public void Doctor.setId(String id) {
        this.id = id;
    }
    
    public Integer Doctor.getVersion() {
        return this.version;
    }
    
    public void Doctor.setVersion(Integer version) {
        this.version = version;
    }
    
    @Transactional
    public void Doctor.persist() {
        doctors.add(this);
    }
    
    @Transactional
    public void Doctor.remove() {
        doctors.remove(this);
    }
    
    @Transactional
    public void Doctor.flush() {
    }
    
    @Transactional
    public void Doctor.clear() {
    }
    
    @Transactional
    public Doctor Doctor.merge() {
        return this;
    }
    
    public static final Doctors Doctor.doctors() {
        Doctors doctors = new Doctor().doctors;
        return doctors;
    }

    public static long Doctor.countDoctors() {
        return 10;
    }
    
    public static List<Doctor> Doctor.findAllDoctors() {
        return doctors().getAll();
    }
    
    public static Doctor Doctor.findDoctor(String id) {
        if (id == null) return null;
        return doctors().get(id);
    }
    
    public static List<Doctor> Doctor.findDoctorEntries(int firstResult, int maxResults) {
        return doctors().getAll();
    }
    
}
